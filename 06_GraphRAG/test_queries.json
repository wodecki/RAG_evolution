{
  "evaluation_queries": [
    {
      "id": "count_python_devs",
      "query": "How many Python developers are available?",
      "type": "counting",
      "expected_cypher": "MATCH (p:Programmer)-[:HAS_SKILL]->(s:Skill {name: 'Python'}) RETURN count(p) as python_developers",
      "description": "Tests exact counting capability",
      "graph_advantage": "Precise count through relationship traversal"
    },
    {
      "id": "aws_certified_count",
      "query": "How many developers have AWS certifications?",
      "type": "counting",
      "expected_cypher": "MATCH (p:Programmer)-[:HAS_CERTIFICATION]->(c:Certification) WHERE c.name CONTAINS 'AWS' RETURN count(DISTINCT p) as aws_certified",
      "description": "Tests filtering and counting with string matching",
      "graph_advantage": "Exact certification matching and counting"
    },
    {
      "id": "avg_react_rate",
      "query": "What is the average hourly rate for React developers?",
      "type": "aggregation",
      "expected_cypher": "MATCH (p:Programmer)-[:HAS_SKILL]->(s:Skill {name: 'React'}) RETURN avg(p.hourly_rate) as average_rate, count(p) as developer_count",
      "description": "Tests aggregation operations",
      "graph_advantage": "Direct mathematical aggregation on filtered nodes"
    },
    {
      "id": "top_developers_projects",
      "query": "List the top 5 developers by number of completed projects",
      "type": "ranking",
      "expected_cypher": "MATCH (p:Programmer)-[:WORKED_ON]->(pr:Project) RETURN p.name, count(pr) as project_count ORDER BY project_count DESC LIMIT 5",
      "description": "Tests sorting and ranking operations",
      "graph_advantage": "Precise ranking based on relationship counting"
    },
    {
      "id": "fintech_experience",
      "query": "Find developers who have worked on fintech projects",
      "type": "filtering",
      "expected_cypher": "MATCH (p:Programmer)-[:WORKED_ON]->(pr:Project) WHERE pr.name CONTAINS 'fintech' OR pr.name CONTAINS 'FinTech' OR pr.description CONTAINS 'financial' RETURN p.name, pr.name, pr.client",
      "description": "Tests domain-specific filtering",
      "graph_advantage": "Relationship-based filtering with domain knowledge"
    },
    {
      "id": "skill_distribution",
      "query": "Which skills are most common among our programmers?",
      "type": "aggregation",
      "expected_cypher": "MATCH (p:Programmer)-[:HAS_SKILL]->(s:Skill) RETURN s.name as skill, count(p) as programmer_count ORDER BY programmer_count DESC LIMIT 10",
      "description": "Tests grouping and aggregation",
      "graph_advantage": "Direct skill relationship aggregation"
    },
    {
      "id": "senior_javascript_devs",
      "query": "Who are the most experienced JavaScript developers?",
      "type": "filtering_ranking",
      "expected_cypher": "MATCH (p:Programmer)-[hs:HAS_SKILL]->(s:Skill {name: 'JavaScript'}) RETURN p.name, p.location, hs.years_experience, hs.proficiency ORDER BY hs.years_experience DESC, hs.proficiency DESC LIMIT 10",
      "description": "Tests multi-criteria filtering and ranking",
      "graph_advantage": "Relationship property-based sorting"
    },
    {
      "id": "ml_projects",
      "query": "What projects require machine learning skills?",
      "type": "filtering",
      "expected_cypher": "MATCH (pr:Project)-[:REQUIRES_SKILL]->(s:Skill) WHERE s.name CONTAINS 'Machine Learning' OR s.name CONTAINS 'ML' RETURN pr.name, pr.client, pr.description",
      "description": "Tests project requirement filtering",
      "graph_advantage": "Direct requirement relationship traversal"
    },
    {
      "id": "immediate_availability",
      "query": "Find developers available for immediate start",
      "type": "filtering",
      "expected_cypher": "MATCH (p:Programmer) WHERE p.availability_start <= date() OR p.availability_start IS NULL RETURN p.name, p.location, p.hourly_rate, p.availability_start ORDER BY p.availability_start",
      "description": "Tests temporal property filtering",
      "graph_advantage": "Date arithmetic and null handling"
    },
    {
      "id": "collaboration_network",
      "query": "Find Python developers who worked with AWS-certified colleagues",
      "type": "multi_hop",
      "expected_cypher": "MATCH (p1:Programmer)-[:HAS_SKILL]->(s:Skill {name: 'Python'}) MATCH (p1)-[:WORKED_WITH]->(p2:Programmer) MATCH (p2)-[:HAS_CERTIFICATION]->(c:Certification) WHERE c.name CONTAINS 'AWS' RETURN DISTINCT p1.name as python_dev, p2.name as aws_colleague, c.name as certification",
      "description": "Tests multi-hop relationship reasoning",
      "graph_advantage": "Complex relationship traversal impossible for vector search"
    }
  ],
  "advanced_queries": [
    {
      "id": "skill_proficiency_analysis",
      "query": "Show the proficiency distribution for Python developers",
      "expected_cypher": "MATCH (p:Programmer)-[hs:HAS_SKILL]->(s:Skill {name: 'Python'}) RETURN hs.proficiency, count(p) as developer_count ORDER BY hs.proficiency DESC",
      "description": "Analyzes skill proficiency levels",
      "complexity": "medium"
    },
    {
      "id": "temporal_availability_analysis",
      "query": "How many developers will be available each month for the next 6 months?",
      "expected_cypher": "MATCH (p:Programmer) WHERE p.availability_start >= date() AND p.availability_start <= date() + duration({months: 6}) WITH p.availability_start.month as month, count(p) as available_count RETURN month, available_count ORDER BY month",
      "description": "Complex temporal analysis",
      "complexity": "high"
    },
    {
      "id": "team_composition_optimization",
      "query": "Find the best team of 5 developers for a React + Node.js project",
      "expected_cypher": "MATCH (p:Programmer)-[:HAS_SKILL]->(s:Skill) WHERE s.name IN ['React', 'Node.js', 'JavaScript'] WITH p, collect(s.name) as skills WHERE size(skills) >= 2 RETURN p.name, p.hourly_rate, skills ORDER BY size(skills) DESC, p.hourly_rate ASC LIMIT 5",
      "description": "Multi-skill optimization query",
      "complexity": "high"
    }
  ],
  "test_scenarios": [
    {
      "scenario": "Emergency Staffing",
      "description": "Client needs 3 senior developers available immediately for a critical project",
      "queries": [
        "Find senior developers available for immediate start",
        "Who has the most project experience among available developers?",
        "What skills do immediately available developers have?"
      ]
    },
    {
      "scenario": "Skills Gap Analysis",
      "description": "Analyze what skills we're missing for upcoming projects",
      "queries": [
        "What skills are required by active projects?",
        "Which required skills have the fewest developers?",
        "What certifications should we prioritize for training?"
      ]
    },
    {
      "scenario": "Team Formation",
      "description": "Build optimal teams for new projects based on skills and collaboration history",
      "queries": [
        "Find developers who have successfully collaborated before",
        "What is the collaboration network around our best developers?",
        "Who are the most versatile developers with multiple skills?"
      ]
    }
  ]
}